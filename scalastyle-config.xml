<!--
 ~ ONZO Ltd. Scalastyle configuration.  
 ~ 
 ~ Based on the one for Apache Spark
-->

<scalastyle>
  <name>Onzo Scalastyle Configuration</name>


  <!-- ================================================================================ -->
  <!-- Rules we don't enforce                                                           -->
  <!-- ================================================================================ -->

  <!-- Licence show be included with project as separate file, not in source files. -->
  <check level="error" class="org.scalastyle.file.HeaderMatchesChecker" enabled="false"></check>

  <!-- Not really a problem at the moment -->
  <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="false"></check>

  <!-- Scaladoc is a good thing in moderation, but we don't want to enforce for everything all the time.  -->
  <check level="warning" class="org.scalastyle.scalariform.ScalaDocChecker" enabled="false"></check> 

  <!-- ================================================================================ -->
  <!-- Rules to enforce consistent code formatting and naming conventions               -->
  <!-- ================================================================================ -->

  <!-- No Tabs! Use 2 spaces instead -->
  <!-- <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"></check> -->

  <!-- Would like this to be set to error level, but doing so crashes scalastyle 0.7 for some reason -->
  <check level="warning" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
    <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
  </check>

  <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
    <parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>
  </check>

  <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
    <parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
    <parameters><parameter name="ignoreOverride">true</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.FieldNamesChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.ForBraceChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true"></check>

  <!-- Would like this to be set to error level, but doing so crashes scalastyle 0.7 for some reason -->
  <check level="warning" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
   <parameters>
     <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
   </parameters>
  </check>

  <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
    <parameters>
     <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
    </parameters>
  </check>

  <!-- Lines should not run to more then 100 characters -->
  <!-- Would like this to be set to error level, but doing so crashes scalastyle 0.7 for some reason -->
  <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLineLength"><![CDATA[100]]></parameter>
      <parameter name="tabSize"><![CDATA[2]]></parameter>
      <parameter name="ignoreImports">true</parameter>
    </parameters>
  </check> 

  <check level="error" class="org.scalastyle.file.SpacesBeforePlusChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.file.SpacesAfterPlusChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.file.NoWhitespaceAfterLeftBracketChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.file.NoWhitespaceBeforeLeftBracketChecker" enabled="true"></check>

  <!-- Imports should be together at the top of the file -->
  <check level="error" class="org.scalastyle.file.ImportGroupingChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.file.EmptyClassChecker" enabled="true"></check> 


  <!-- ================================================================================ -->
  <!-- Rules to enforce functional coding style                                         -->
  <!-- ================================================================================ -->

  <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.scalariform.VarLocalChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.scalariform.VarFieldChecker" enabled="true"></check>

  <check level="error" class="org.scalastyle.scalariform.WhileChecker" enabled="true"></check> 


  <!-- ================================================================================ -->
  <!-- Warnings on potential code hygiene issues                                        -->
  <!-- ================================================================================ -->

  <!-- ??? usually shouldn't be checked into the code base. -->
  <check level="warning" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"></check>

  <!-- 'println' might be left in from debugging -->
  <check customId="println" level="warning" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters><parameter name="regex">^println$</parameter></parameters>
    <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
      // scalastyle:off println
      println(...)
      // scalastyle:on println]]></customMessage>
  </check> 

  <check level="warning" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
    <parameters><parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter></parameters>
  </check>

  <!-- Avoid wild-card imports -->
  <check level="warning" class="org.scalastyle.scalariform.UnderscoreImportChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
    <parameters><parameter name="ignore">-1,0,1,2,3</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"></check>
  
  <check level="warning" class="org.scalastyle.scalariform.ProcedureDeclarationChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"></check> 

  <check level="warning" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check> 

  <check level="warning" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" enabled="true"></check> 


  <!-- ================================================================================ -->
  <!-- Warnings on code complexity                                                      -->
  <!-- ================================================================================ -->

  <check level="warning" class="org.scalastyle.file.FileLengthChecker" enabled="true">
    <parameters><parameter name="maxFileLength">800</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
    <parameters><parameter name="maxTypes">20</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
    <parameters><parameter name="maximum">15</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
    <parameters><parameter name="maxLength">50</parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
    <parameters><parameter name="maxParameters"><![CDATA[7]]></parameter></parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
    <parameters><parameter name="maxMethods"><![CDATA[30]]></parameter></parameters>
  </check> 


</scalastyle>
